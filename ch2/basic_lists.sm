#lang sicp
(define (length x)
  (if (null? x)
      0
      (+ 1 (length (cdr x)))))

(define (last x)
  (if (= (length x) 1)
      x
      (last (cdr x))))

(define (append list1 list2)
   (if (null? list1)
       list2
       (cons (car list1) (append (cdr list1) list2))))

(define (reverse x)
  (if (null? x)
      x
      (append (reverse (cdr x)) (list (car x) ))))

(define (square x)
  (* x x))

(define (square-list x)
  (if (null? x)
      nil
      (cons (square (car x))
            (square-list (cdr x)))))

(define (mapcar procedure x)
  (if (null? x)
      nil
      (cons (procedure (car x))
            (mapcar procedure (cdr x)))))

(mapcar square (list 1 2 3 4))
            
