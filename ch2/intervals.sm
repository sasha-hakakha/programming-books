#lang sicp
(define (make-interval lower upper) (cons lower upper))
(define (lower-bound interval) car interval)
(define (upper-bound interval) cdr interval)

(define (intadd x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (intsub x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))

(define (intmul x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (intdiv x y)
  (if (and (< (lower-bound y) 0)
           (> (upper-bound y) 0))
      (display "error: cannot divide by an interval spanning zero.")
    (intmul x
            (make-interval (/ 1 (upper-bound y))
                            (/ 1 (lower-bound y))))))

(define (percent-to-int p)
  (* p 100))
(define (make-interval-percent center percent)
  (let (dist (* center (/ 2 (percent-to-int percent)))))
  (make-interval (- center dist) (+ center dist)))

(define (percent i)
  (let (width (abs (- (upper i) (lower i)))))
  (let (center (/ (abs (+ (upper i) (lower i)))
                  2)))
    (* 100 (/ width center)))


  
